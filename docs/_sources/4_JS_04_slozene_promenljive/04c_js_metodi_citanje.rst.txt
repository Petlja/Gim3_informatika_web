Методи - функције у објектима
=============================

У претходним лекцијама смо се упознали са функцијама – групама наредби које добијају неке променљиве као параметре које некако обраде и враћају резултат. Након тога смо се упознали и са објектима који могу да садрже у себи податке као што су променљиве.

Објекти у себи поред података могу да садрже и локалне функције које се називају методе. Методе су веома сличне обичним функцијама, свака има своје име, могу да добијају параметре, уз разлику у томе да су тесно везане за објекат и служе да приликом позива промене објекат коме припадају или да израчунају неке вредности на основу поља објекта.

Ако објекат има методе, оне се користе слично пољима објеката. Као што се неком пољу приступа тако што се иза имена објекат стави тачка а онда име поља, тако се и функције објекта позивају тако што се иза имена објекта коме припадају стави тачка и име функције иза кога се налазе заграде у којима су опционо параметри, као на пример:

.. code-block:: javascript

    imeObjekta.imeMetode(<parametri>)

У језику *JavaScript* постоји велики број уграђених објеката чије методе можете да користите.

Методе низова
-------------

Низови у језику *JavaScript* су флексибилне структуре, у које јако можете да додајете нове елементе или да из њих избацујете неке елементе. Ако је *ocene* променљива која садржи низ неких вредности, можете да користите следеће функције:

- ``toString()`` ова метода ће вратити стринг који садржи све елементе низа спојене запетом.
- ``push(vrednost)`` када се ова метода примени над низом, она ће додати ``vrednost`` на крај низа као нови последњи елемент.
- ``pop()`` када се ова метода примени над низом, она ће уклонити последњи елемент из низа.
- ``join(separator)`` метода веома слична методи ``toString()``, враћа стринг који представља садржај низа. Једина разлика је то што ће уместо запете користити вредност параметра ``separator``, која је прослеђена као параметар.
- ``slice(pocetak, kraj)`` ова метода враћа нови низ, који представља део низа над којим је примењена. Нови низ ће садржати све елементе почевши од елемента на позицији ``pocetak`` до елемента испред позиције ``kraj``.

У следећем примеру можете видети како се користе ове методе над објектом који представља низ оцена:

.. code-block:: javascript

    var ocene = [5,5,4,5]
    ocene.pop();	-- ocene = [5,5,4]
    ocene.push(4); 	-- ocene = [5,5,4,4]
    ocene.push(5); 	-- ocene = [5,5,4,4,5]

    alert( ocene.toString() );  -- приказаће се 5,5,4,4,5
    alert( ocene.join( ` : ` ) ); -- приказаће се 5 : 5 : 4 : 4 : 5
    ocene = ocene.slice(2,5); 	-- ocene = [4,4]

Методе документа стране
-----------------------

У претходној секцији смо се упознали са објектом ``document``, који нам омогућава да приступимо *HTML* елементима у страни помоћу неких поља тог објекта. Поред поља објеката, овај објекат има и неколико метода које нам омогућавају да пронађемо елементе на страни по атрибуту ``id``, типу елемента, или некој од класа. У следећој листи можете да видите најбитније методе објекта ``document``:

- ``document.querySelector(cssSelektor)`` проналази први *HTML* елемент у документу који одговара задатом *CSS* селектору.
- ``document.querySelectorAll(cssSelektor)`` проналази све *HTML* елементе у документу који одговарају задатом *CSS* селектору.

Ове две методе су вам довољне да пронађете било који елемент у страни. Било који елемент који се може описати и стилизовати неким *CSS* селектором се може пронаћи помоћу ових метода тако што се тај исти селектор проследи као параметар.

Поред ових метода можете користити још три метода ради проналажења објеката по идентификатору, имену елемента, или класи:

- ``document.getElementById(id)`` проналази један *HTML* елемент у документу који има вредност идентификатора која је прослеђена методи као параметар. Ово је специјални случај методе ``querySelector``. На пример, ``getElementById('naslov')`` је еквивалентан позиву методе ``querySelector('#naslov')``.
- ``document.getElementsByTagName(name)`` проналази низ *HTML* елемента у документу који имају задату ознаку. Овa метода је идентична методи методе ``querySelectorAll``. На пример, ``getElementByTagName('div')`` је еквивалентан позиву методе ``querySelectorАll('div')``.
- ``document.getElementsByClassName(name)``	проналази низ *HTML* елемента у документу који имају задату класу. Ово је специјални случај методе ``querySelectorAll``. На пример, ``getElementByClassName('levo')`` је еквивалентан позиву методе ``querySelectorAll('.levo')``.

Ове методе објекта ``document`` нам омогућавају да претражимо *HTML* документ по различитим критеријумима, нађемо елементе који одговарају неком критеријуму и променимо им нека својства или изглед. У следећем примеру можемо да пронађемо све елементе који имају класу ``left`` и променимо им стил тако што поставимо црвену боју текста:

.. code-block:: javascript

    var elementiSaLeveStrane = document.querySelectorAll(`.left`)
    // или
    // var elementiSaLeveStrane = document.getElementsByClassName(`left`)
    for(i=0; i< elementiSaLeveStrane.length; i++) {
        elementiSaLeveStrane[i].style.color = `red`;
    }
