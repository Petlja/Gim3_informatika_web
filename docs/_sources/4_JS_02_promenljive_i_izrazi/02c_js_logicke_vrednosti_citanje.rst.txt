Логичке вредности и изрази
==========================

Тип који садржи логичке вредности се назива *boolean* по енглеском математичару - логичару, Џорџу Булу (*George Boole*). У овај тип спадају само две вредности - тачно и нетачно. Обе се у програмима записују са ``true`` (тачно) и ``false`` (нетачно).

**Логички изрази** су изрази чији резултат је логичка вредност.

Бројчани изрази се у *JavaScript* програмима могу поредити на сличан начин као у математици. Симболи који се користе за означавање односа (релација) између бројева се донекле разликују у програмирању и математици. Следећа табела даје преглед ознака коришћених релација.

.. csv-table:: Релацијски оператори
    :header: "JavaScript", "Математика", "Значење"
    :widths: 20, 20, 60
    :align: left

    a < b,      :math:`a < b`,       a је мање од b
    a <= b,     :math:`a \leq b`,    a је мање или једнако b
    a > b,      :math:`a > b`,       a је веће од b
    a >= b,     :math:`a \geq b`,    a је веће или једнако b
    a == b,     :math:`a = b`,       a је једнако b
    a != b,     :math:`a \neq b`,    a није једнако b
                            
Ознаке :math:`<, <=, >, >=, ==, !=` се у прогрaмирању често називају релацијским операторима, а релације облика :math:`a < b` се називају логички изрази. Тиме се наглашава да овде није реч о констатовању и изражавању односа између датих бројева, него о израчунавању тог односа. Према томе, запис :math:`a < b` треба да схватимо као **израз** чија је вредност у сваком конкретном случају "тачно" или "нетачно". Вредности таквих израза могу да се исписују на исти начин као и било које друге вредности, на пример:

.. activecode:: relacija_js
    :language: javascript
    :nocodelens:

    let a = parseInt(prompt('a=?'));
    let b = parseInt(prompt('b=?'));
    alert(a < b); 

Овакве једноставне логичке изразе попут :math:`a < b` можемо да комбинујемо користећи речи **не**, **и** и **или**. Тако формирамо сложеније логичке изразе. На пример, ако нас интересује да ли је вредност :math:`x` у интервалу :math:`(a, b)`, ми у ствари желимо да проверимо да ли истовремено важи :math:`a < x` и :math:`x < b`, што се математички записује :math:`(a < x) \land (x < b)`.

Уопште, ако су ``p`` и ``q`` логичке вредности, од њих можемо да формирамо овакве логичке изразе:

.. csv-table:: Логички оператори
    :header: "Оператор", "Математика", "JavaScript", "Значење", "тачан ако и само ако"
    :widths: 15, 15, 15, 15, 40
    :align: left

    негација,    :math:`\neg p`,        !p,       није *p*, "*p* је нетачан"
    конјункција, :math:`p \land q`,     p && q,   *p* и *q*, "*p* и *q* су оба тачни"
    дисјункција, :math:`p \lor q`,      p || q,   *p* или *q*, "бар један од *p* и *q* је тачан"

Негација је унарни оператор, што значи да се примењује на један логички израз. Конјункција и дисјункција су бинарни оператори, то јест они повезују по два логичка израза у један сложенији.

Од ова три оператора, негација има највиши приоритет, затим конјункција (логичко и), а најнижи приоритет има дисјункција (логичко или). Тако на пример, ако су *p*, *q* и *r* логичке променљиве, запис ``p || q && r`` има исто значење као ``p || (q && r)``.

