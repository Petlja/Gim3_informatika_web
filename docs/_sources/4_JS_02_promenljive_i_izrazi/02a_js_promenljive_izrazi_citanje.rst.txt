Основе језика *JavaScript*
==========================

Променљиве
----------

Као што знамо, променљива је именовани простор у меморији у коме се чува нека вредност. Садржај тог простора мењамо додељивањем вредности променљивој, што можемо чинити више пута програму, у складу са алгоритмом који програмирамо. Вредност променљиве можемо да употребимо за израчунавање нових вредности, а можемо и да је на неки начин прикажемо као резултат (на пример, користећи функцију ``alert``, убацивањем вредности променљиве у веб страну или уписивањем те вредности у неки фајл).

Овим је у најкраћем описан начин употребе променљивих, а у наставку ћемо видети још неке детаље у вези са тиме.

Декларација
'''''''''''

Декларацијом променљиве се најављује њена употреба у наставку програма и одређује се у ком делу програма се та променљива може користити. 

.. infonote::

    У језику *JavaScript* декларацију променљивих ``x``, ``y``, ``z`` треба писати овако:

    .. code-block:: javascript

        let x, y, z;

Старији (и лошији) начин декларисања је писање речи ``var`` уместо ``let``, а могуће је и потпуно изоставити декларацију (што је исто као да смо је декларисали користећи реч ``var``). Мада разлике у значењу декларација са ``let`` и ``var`` нису велике, декларисање помоћу речи ``var`` треба избегавати, јер у сложенијим програмима оно може да доведе до необичних и често неочекиваних и збуњујућих ефеката. Наравно, треба избегавати и коришћење променљиве без декларације, јер је оно равноправно декларацији помоћу речи ``var``. 

Употреба речи ``let`` у декларацијама нас форсира да пишемо јасније програме и помаже нам да не правимо багове. Конкретније, неке грешке које направимо пишући програм без декларација (или са старим декларацијама помоћу речи ``var``) су багови, тј. такве да програм може да се изврши, али се добија погрешан резултат. Када у декларацијама истог програма користмо реч ``let``, програм може да постане синтаксно неисправан, или да пукне при извршавању. Ово је боље, јер о таквим грешкама добијамо поруке, па их и лакше исправљамо.
    
У разним примерима на интернету и по књигама, видећете да је употреба речи ``var`` при декларацијама променљивих прилично честа. То је, нажалост, највећим делом наслеђе из времена када у језику *JavaScript* још није постојала декларација помоћу речи ``let``.


Иницијализација
'''''''''''''''

Често се променљивој одмах при декларацији додељује и почетна вредност. На пример, уместо:

.. activecode:: let_i_poc_vrednost1_js
    :language: javascript
    :nocodelens:

    let x, y, z;
    x = parseInt(prompt('x=?'));
    y = parseInt(prompt('y=?'));
    z = x + y;
    alert(z);

можемо да пишемо:

.. activecode:: let_i_poc_vrednost2_js
    :language: javascript
    :nocodelens:

    let x = parseInt(prompt('x=?'));
    let y = parseInt(prompt('y=?'));
    let z = x + y;
    alert(z);

Додељивање почетне вредности променљивој назива се **иницијализација**. Препоручује се да променљиве иницијализујемо одмах при декларацији кад год то логика програма допушта.

Понекад је у програмима иницијализација променљиве једино додељивање вредности тој променљивој. Када не намеравамо да мењамо вредност променљиве у наставку програма, добро је у декларацији уместо речи ``let`` писати реч ``const``.

.. activecode:: let_i_poc_vrednost3_js
    :language: javascript
    :nocodelens:

    const x = parseInt(prompt('x=?'));
    const y = parseInt(prompt('y=?'));
    const z = x + y;
    alert(z);

Тиме програм додатно постаје јаснији за читање, а неки багови се могу претворити у синтаксне грешке или грешке у току извршавања због неизвршивости наредбе (енгл. *runtime errors*, пуцање програма). Као што је раније речено, ако већ имамо грешке у програму, онда је боље да су то грешке о којима добијамо поруку (као што су синтаксне грешке и пуцање програма), јер ћемо уз помоћ тих порука грешке лакше исправити.

Вредности и изрази
------------------

Вредности у програмима су подаци који се уносе у програм, чувају у фајловима, комбинују приликом рачунања израза и приказују на странама. Те вредности могу бити разних врста, тј. могу припадати различитим типовима. Поменућемо типове вредности који се најчешће користе.

Бројчане вредности (тип *number*)
'''''''''''''''''''''''''''''''''

Правила за писање бројева су практично иста у свим програмским језицима. Примери исправно написаних вредности (константи) овог типа су дати у табели.

.. csv-table:: Бројчане вредности
    :header: "JavaScript", "Математика"
    :widths: 20, 80
    :align: left

    ``0``,                :math:`0`
    ``123``,              :math:`123`
    ``-57``,              :math:`-57`
    ``37.4``,             :math:`37.4`
    ``0.217e-9``,         :math:`0.217\cdot 10^{-9}`
    ``-1e6``,             :math:`-1 \cdot 10^6`

**Бројчани изрази** се формирају слично као у математици, користећи бројчане вредности (променљиве и константе), знакове операција, математичке функције и заграде. На пример:

.. csv-table:: Бројчани изрази
    :header: "JavaScript", "Математика"
    :widths: 20, 80
    :align: left

    ``a + b``,                         :math:`a + b`
    ``a * b``,                         :math:`a \cdot b` (или :math:`a b`)
    ``a / b - c``,                     :math:`{a \over b} - c`
    ``a / (b - c)``,                   :math:`a \over {b-c}`
    ``a / b / c``,                     :math:`{a \over b} \over c`
    ``a / (b / c)``,                   :math:`a \over {b \over c}`
    ``Math.sqrt(Math.abs(x)+1)``,      :math:`\sqrt{|x| + 1}`
    ``Math.sqrt(x ** 2 + y ** 2)``,    :math:`\sqrt{x^2 + y^2}`
    ``2 ** (n + 1)``,                  :math:`2^{n+1}`
    ``2 ** n + 1``,                    :math:`2^n + 1`

Приоритет операција је у суштини исти као у математици. Ако нисте сигурни у вези са приоритетом, користите заграде (непотребне заграде нису грешка).

**Специјалне вредности** типа *number*

У јава скрипту у тип *number* додатно спадају и специјалне вредности ``Infinity``, ``-Infinity`` и ``-Nan``. Ове вредности нису бројеви, али су корисна и смислена допуна скупа бројчаних вредности.

.. csv-table:: Специјалне вредности нипа *number*
    :header: "JavaScript", "Значење"
    :widths: 20, 80
    :align: left

    ``Infinity``,         плус бесконачно (:math:`+\infty`)
    ``-Infinity``,        минус бесконачно (:math:`-\infty`)
    ``-Nan``,             није број (енгл. *Not A Number*)
   
Ове вредности се могу добити као резултат неких рачунских операција, на пример:

.. activecode:: specijalne_vrednosti_js
    :language: javascript
    :nocodelens:

    alert(1/0); // плус бесконачно
    alert(-1/0); // минус бесконачно
    alert(Math.sqrt(-1)); // не-број

.. comment

    .. activecode:: specijalne_vrednosti_js
        :language: javascript
        :nocodelens:

        const x = 1/0;      
        alert('1/0 = ' + x); // плус бесконачно
        
        const y = -1/0;     
        alert('-1/0 = ' + y); // минус бесконачно
        
        const z = Math.sqrt(-1); 
        alert('sqrt(-1) = ' + z); // не-број

Наведене операције (дељење нулом, кореновање негативног броја) немају резултат у скупу реалних бројева, па би када специјалних вредности не би било, програм морао да пријави грешку током извршавања и пукне (*runtime error*). Увођењем специјалних вредности омогућено је да програм настави да ради на смислен начин. Уколико се нека од специјалних вредности појави међу резултатима, она може имати смисла за корисника иако она није број.

Логичке вредности (тип *boolean*)
'''''''''''''''''''''''''''''''''

У овај тип спадају само две вредности - тачно и нетачно. Обе се у програмима записују са ``true`` (тачно) и ``false`` (нетачно).

**Логички изрази** су изрази чији резултат је логичка вредност.

Бројчани изрази се у *JavaScript* програмима могу поредити на сличан начин као у математици. Симболи који се користе за означавање односа (релација) између бројева се донекле разликују у програмирању и математици. Следећа табела даје преглед ознака коришћених релација.

.. csv-table:: Релацијски оператори
    :header: "JavaScript", "Математика", "Значење"
    :widths: 20, 20, 60
    :align: left

    a < b,      :math:`a < b`,       a је мање од b
    a <= b,     :math:`a \leq b`,    a је мање или једнако b
    a > b,      :math:`a > b`,       a је веће од b
    a >= b,     :math:`a \geq b`,    a је веће или једнако b
    a == b,     :math:`a = b`,       a је једнако b
    a != b,     :math:`a \neq b`,    a није једнако b
                            
Ознаке :math:`<, <=, >, >=, ==, !=` се у прогрaмирању често називају релацијским операторима, а релације облика :math:`a < b` се називају логички изрази. Тиме се наглашава да овде није реч о констатовању и изражавању односа између датих бројева, него о израчунавању тог односа. Према томе, запис :math:`a < b` треба да схватимо као **израз** чија је вредност у сваком конкретном случају "тачно" или "нетачно". Вредности таквих израза могу да се исписују на исти начин као и било које друге вредности, на пример:

.. activecode:: relacija_js
    :language: javascript
    :nocodelens:

    let a = parseInt(prompt('a=?'));
    let b = parseInt(prompt('b=?'));
    alert(a < b); 

Овакве једноставне логичке изразе попут :math:`a < b` можемо да комбинујемо користећи речи **не**, **и** и **или**. Тако формирамо сложеније логичке изразе. На пример, ако нас интересује да ли је вредност :math:`x` у интервалу :math:`(a, b)`, ми у ствари желимо да проверимо да ли истовремено важи :math:`a < x` и :math:`x < b`, што се математички записује :math:`(a < x) \land (x < b)`.

Уопште, ако су ``p`` и ``q`` логичке вредности, од њих можемо да формирамо овакве логичке изразе:

.. csv-table:: Логички оператори
    :header: "Оператор", "Математика", "JavaScript", "Значење", "тачан ако и само ако"
    :widths: 15, 15, 15, 15, 40
    :align: left

    негација,    :math:`\neg p`,        !p,       није *p*, "*p* је нетачан"
    конјункција, :math:`p \land q`,     p && q,   *p* и *q*, "*p* и *q* су оба тачни"
    дисјункција, :math:`p \lor q`,      p || q,   *p* или *q*, "бар један од *p* и *q* је тачан"

Негација је унарни оператор, што значи да се примењује на један логички израз. Конјункција и дисјункција су бинарни оператори, то јест они повезују по два логичка израза у један сложенији.

Од ова три оператора, негација има највиши приоритет, затим конјункција (логичко и), а најнижи приоритет има дисјункција (логичко или). Тако на пример, ако су *p*, *q* и *r* логичке променљиве, запис ``p || q && r`` има исто значење као ``p || (q && r)``.

Текстуалне вредности (тип *string*)
'''''''''''''''''''''''''''''''''''

Текстуалне вредности се често називају и стрингови, а пишу се као низ слова и других симбола, наведених међу наводницима једне од три могуће врсте. Једну врсту наводника смо већ користили у претходном програму са специјалним нумеричким вредностима, а у следећем примеру ћемо видети све три врсте:

.. activecode:: navodnici_js
    :language: javascript
    :nocodelens:

    alert('Једноструки наводници');
    alert("Двоструки наводници");
    alert(`Обрнути наводници`);
    alert(`Рек'о је: "Сачекај ме ту!" и потрч'о.`);
    
Обрнути наводник се на тастатурама обично налази лево од броја 1 (испод тастера *Esc*). Из последњег реда примера видимо да се наводници могу приказивати као и други симболи када се за означавање почетка и краја текста користи нека друга врста наводника. Наводници на почетку и крају текста морају бити исте врсте.

    
Изрази и додељивање вредности
-----------------------------

Када дефинишете променљиве, потребно је да у њих упишете неке вредности. Уписивање вредности у променљиве се ради тако што се напише име променљиве онда знак = иза кога следи вредност која се уписује у променљиву:
X = 3
Y = X
Прва наредба ће уписати вредност 3 у променљиву X. Друга наредба ће прочитати вредност која се налази у променљивој X и уписати је у променљиву Y.
Задатак - размена вредности у променљивама
Потребно је написати програм који декларише две променљиве и додељује им вредности 5 и 8. Потом треба да замени вредности ових променљивих тако да у првој буде вредност друге, а у другој вредност прве.


.. comment

    dodela
        y = x
        razmena vrednosti
        
    I/O
        alert, prompt, confirm    
        console.log(text)
        document.write(text) // pisanje html koda sa tagovima <h1>, <p> itd.
        
    Izrazi
        x = 'Java'
        y = "Script"
        string1 = x + " " + y  // == JavaScript
        string2 = x + 2        // == Java2
        string1 = `Резултат је ${z+10}.`;

