Низови
======

Низ је сложена променљива која (као и објекат) садржи више других променљивих у себи. Свака променљива у низу има свој редни број (или индекс, како ћемо га звати у наставку) помоћу ког се може наћи вредност која нам треба. Као што променљиве можемо да замислимо као кутије у којима се налазе вредности, низове можемо да замислимо као групе кутија где свака кутија има свој редни број (или индекс):

.. image:: ../../_images/js/niz.png
    :width: 600px
    :align: center

Свакој појединачној променљивој у низу (зваћемо их елементи низа) можемо приступити по њеном редном броју тј. индексу и у њу се може или убацити нека вредност или прочитати вредност из ње. 
Треба имати на уму да ПРВИ елемент у низу има индекс 0 – ово правило је карактеристично за већину програмских језика. Ако имамо променљиву која се зове ``br`` и представља низ, онда можемо да дођемо до елемената у том низу тако што иза имена низа ставимо угласте заграде и у њих редни број.

Низ се прави тако што се унутар угластих заграда наведу вредности које ће бити уписане у елементе низа:

.. code-block:: javascript

    br = [10, 8, 26, 5, 3, 12]

У следећем примеру ћемо у елементе низа са редним бројевима 0, 1 и 2 уписати неке бројеве, а онда ћемо прочитати вредности из тих елемената, да бисмо их сабрали и збир ћемо уписати у променљиву zbir:

.. code-block:: javascript

    br[0] = 10
    br[1] = 3
    br[2] = 200
    zbir = br[0] + br[1] + br[2]

Још једна корисна могућност: ако иза имена низа ставимо .length добићемо колико има елемената у низу (нпр. br.length представља број елемената у низу br). Следећи програм ће приказати у поруци колико има елемената у низу:

.. code-block:: javascript

    alert("Низ има " + br.length + " елемената")

Један потпуни програм који прави нови низ бројева, приказује колико има елемената, и петљом понавља наредбу која приказује вредност елемента је приказан у следећем програму:

.. code-block:: javascript

    br = [10, 8, 26, 5, 3, 12]
    alert("Број елемената у низу је: " + br.length)
    i = 0
    while ( i < br.length ) {
      alert("Број: " + br[i])
      i = i + 1
    }

У неким језицима је приликом дефинисања низа потребно навести његову дужину (тј. колико ће имати елемената). У JavaScript-у ово није потребно - сваки пут када покушате да упишете неку вредност у елемент низа са неким индексом, низ ће аутоматски бити проширен до индекса који вам је потребан.

.. code-block:: javascript

    var ocene = []
    ocene[0] = 4
    ocene[1] = 5
    ocene[2] = 2
    ocene[3] = 5

Прво смо направили празан низ. Када смо уписали прву оцену, низ је аутоматски увећан за један, како би се обезбедило место за нову променљиву. Сваки наредни упис ће на исти начин аутоматски проширити низ како би се обезбедило да има довољно места.

Објектни модел документа стране
-------------------------------

У лекцији о објектима смо се упознали са објектом ``document``, помоћу којег можемо да приступимо елементима стране. У претходним примерима смо видели како да искористимо овај објекат да променимо стил неког елемента.

Објекат ``document.body`` садржи у себи и неколико објеката као што су ``images``, ``anchors`` и ``scripts``, који нам омогућавају да добијемо низове који садрже све слике, линкове или скриптове који се налазе у *HTML* документу.

У следећем примеру можете видети како да пронађете низ који представља све слике у документу и прикажете колико има слика:

.. code-block:: javascript

    var slike = document.body.images;
    var brojSlika = slike.length;
    alert(`У документу се налази ${brojSlika} слика`)

.. questionnote::

    **Пример - Сабирање бројева у низу**

    Проналажење збира, или производа бројева у низу је вероватно најчешћи проблем који ћете решавати. Прво ћемо дефинисати променљиву у којој ће бити збир елемената. Почетна вредност ове променљиве ће бити нула. Онда ћемо проћи кроз низ, узети сваки елемент и његову вредност додати у збир. У следећем примеру је приказана функција која израчунава збир елемената низа на овај начин:

.. code-block:: javascript

    function zbir ( niz ) {
      let zbir = 0;
      let i = 0;
      while (i< niz.length) {
          zbir = zbir + niz[i];
          i = i + 1;
      }
      return zbir;
    }

Пример – постављање наслова слика
---------------------------------

У сликама (елементи <img>) је обавезно поставити alt атрибут али не и атрибут title. Потребно је написати JavaScript код који пролази кроз све слике у веб страни, у свакој провери да ли је атрибут title стављен и ако није као title треба уписати вредност атрибута alt.

.. code-block:: javascript

    slike = document.images;
    i = 0
    while ( i < slike.length ) {
     let slika = slike[i];
            if ( undefined == slike.title ) {
               slika.title = slika.alt;
            }
     i = i + 1
    }

Задатак - провера да ли су сви бројеви у низу већи од нуле

Потребно је направити функцију која проверава да ли су сви бројеви у низу позитивни (тј. већи од нуле). Ако јесу, функција враћа ``true`` (тачно). 
